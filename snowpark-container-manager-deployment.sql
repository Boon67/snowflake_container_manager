-- Snowflake Container Manager - Snowpark Container Services Deployment
-- Generated on Wed Aug 20 21:13:14 CDT 2025

-- Use the specified role, warehouse, database, and schema
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;
USE DATABASE APPS;
USE SCHEMA CONFIG;

-- Create database and schema if they don't exist
CREATE DATABASE IF NOT EXISTS APPS;
CREATE SCHEMA IF NOT EXISTS APPS.CONFIG;

-- Note: Using existing image repository at /APPS/CONFIG/CONTAINERS
-- Images are pushed to the shared registry location

-- Create tables if they don't exist (using the exact schema from your backend/database.py)
CREATE TABLE IF NOT EXISTS SOLUTIONS (
    ID VARCHAR(36) PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR(1000),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS TAGS (
    ID VARCHAR(36) PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS PARAMETERS (
    ID VARCHAR(36) PRIMARY KEY,
    NAME VARCHAR(255),
    KEY VARCHAR(255) NOT NULL UNIQUE,
    VALUE VARCHAR,
    DESCRIPTION VARCHAR(1000),
    IS_SECRET BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS SOLUTION_PARAMETERS (
    SOLUTION_ID VARCHAR(36) NOT NULL,
    PARAMETER_ID VARCHAR(36) NOT NULL,
    PRIMARY KEY (SOLUTION_ID, PARAMETER_ID),
    CONSTRAINT FK_SP_SOLUTION FOREIGN KEY (SOLUTION_ID) REFERENCES SOLUTIONS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_SP_PARAMETER FOREIGN KEY (PARAMETER_ID) REFERENCES PARAMETERS(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PARAMETER_TAGS (
    PARAMETER_ID VARCHAR(36) NOT NULL,
    TAG_ID VARCHAR(36) NOT NULL,
    PRIMARY KEY (PARAMETER_ID, TAG_ID),
    CONSTRAINT FK_PT_PARAMETER FOREIGN KEY (PARAMETER_ID) REFERENCES PARAMETERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_PT_TAG FOREIGN KEY (TAG_ID) REFERENCES TAGS(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SOLUTION_API_KEYS (
    ID VARCHAR(36) PRIMARY KEY,
    SOLUTION_ID VARCHAR(36) NOT NULL,
    KEY_NAME VARCHAR(255) NOT NULL,
    API_KEY VARCHAR(255) UNIQUE NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    LAST_USED TIMESTAMP_NTZ,
    EXPIRES_AT TIMESTAMP_NTZ,
    FOREIGN KEY (SOLUTION_ID) REFERENCES SOLUTIONS(ID) ON DELETE CASCADE
);



-- Insert default data if not exists
INSERT INTO TAGS (ID, NAME)
SELECT 'env-tag-id', 'Environment'
WHERE NOT EXISTS (SELECT 1 FROM TAGS WHERE NAME = 'Environment');

INSERT INTO TAGS (ID, NAME)
SELECT 'sec-tag-id', 'Security'
WHERE NOT EXISTS (SELECT 1 FROM TAGS WHERE NAME = 'Security');

INSERT INTO TAGS (ID, NAME)
SELECT 'config-tag-id', 'Configuration'
WHERE NOT EXISTS (SELECT 1 FROM TAGS WHERE NAME = 'Configuration');

INSERT INTO TAGS (ID, NAME)
SELECT 'db-tag-id', 'Database'
WHERE NOT EXISTS (SELECT 1 FROM TAGS WHERE NAME = 'Database');

-- Create compute pool for the container manager service
CREATE COMPUTE POOL IF NOT EXISTS CONTAINER_MANAGER_POOL
  MIN_NODES = 1
  MAX_NODES = 2
  INSTANCE_FAMILY = 'CPU_X64_XS'
  COMMENT = 'Compute pool for Snowflake Container Manager service';

-- Drop existing service if it exists
DROP SERVICE IF EXISTS SNOWFLAKE_CONTAINER_MANAGER_SERVICE;

-- Create the service
-- Image path constructed from variables: REGISTRY_DATABASE=apps, REGISTRY_SCHEMA=config, REGISTRY_REPO=containers
-- IMAGE_NAME=snowflake-container-manager, IMAGE_TAG=latest
CREATE SERVICE SNOWFLAKE_CONTAINER_MANAGER_SERVICE
  IN COMPUTE POOL CONTAINER_MANAGER_POOL
  FROM SPECIFICATION $$
spec:
  containers:
  - name: container-manager
    image: /APPS/CONFIG/CONTAINERS/snowflake-container-manager:latest
    env:
      SNOWFLAKE_WAREHOUSE: COMPUTE_WH
      SNOWFLAKE_DATABASE: APPS
      SNOWFLAKE_SCHEMA: CONFIG
      SECRET_KEY: snowflake-container-manager-secret-key
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 720
    resources:
      requests:
        memory: 1Gi
        cpu: 0.5
      limits:
        memory: 2Gi
        cpu: 1.0
    readinessProbe:
      port: 8000
      path: /health
  endpoints:
  - name: container-manager-endpoint
    port: 8000
    public: true
$$
  COMMENT = 'Snowflake Container Manager application service - Web UI for managing container services';

-- Show service status
SHOW SERVICES;

-- Get service endpoint
SELECT SYSTEM$GET_SERVICE_STATUS('SNOWFLAKE_CONTAINER_MANAGER_SERVICE');
